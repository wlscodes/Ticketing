@page "/register"
@using Models
@inject HttpClient Http
@*https://docs.microsoft.com/pl-pl/aspnet/core/blazor/forms-validation?view=aspnetcore-3.1*@
<h3>Zarejestruj konto</h3>

@if (!String.IsNullOrEmpty(APIError))
{
    <div class="alert alert-danger" role="alert">
        @APIError
    </div>
}

@if (!String.IsNullOrEmpty(APISuccess))
{
    <div class="alert alert-success" role="alert">
        @APISuccess
    </div>
}

<EditForm Model="@_register" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group row">
        <label for="name" class="col-sm-2 col-form-label">Imię</label>
        <div class="col-sm-10">
            <InputText id="name" @bind-Value="_register.Name" class="form-control" />
        </div>
    </div>

    <div class="form-group row">
        <label for="surname" class="col-sm-2 col-form-label">Nazwisko</label>
        <div class="col-sm-10">
            <InputText id="surname" @bind-Value="_register.Surname" class="form-control" />
        </div>
    </div>

    <div class="form-group row">
        <label for="login" class="col-sm-2 col-form-label">Login</label>
        <div class="col-sm-10">
            <InputText id="login" @bind-Value="_register.Login" class="form-control" />
        </div>
    </div>

    <div class="form-group row">
        <label for="email" class="col-sm-2 col-form-label">Email</label>
        <div class="col-sm-10">
            <InputText type="email" id="email" @bind-Value="_register.Email" class="form-control" />
        </div>
    </div>

    <div class="form-group row">
        <label for="password" class="col-sm-2 col-form-label">Hasło</label>
        <div class="col-sm-10">
            <InputText type="password" id="password" @bind-Value="_register.Password" class="form-control" />
        </div>
    </div>

    <div class="form-group row">
        <label for="repeatPassword" class="col-sm-2 col-form-label">Powtórz hasło</label>
        <div class="col-sm-10">
            <InputText type="password" id="repeatPassword" @bind-Value="_register.RepeatPassword" class="form-control" />
        </div>
    </div>

    <div class="form-group row">
        <span class="col-sm-2"></span>
        <div class="col-sm-10">
            <div class="form-check">
                <InputCheckbox id="acceptRules" @bind-Value="_register.AcceptRules" class="form-check-input" />
                <label for="acceptRules" class="form-check-label">Akceptuję regulamin</label>
            </div>
        </div>
    </div>
    <div class="form-group row">
        <div class="col-sm-10">
            <button type="submit" class="btn btn-primary">Wyślij</button>
        </div>
    </div>
</EditForm>

@code {
    private Register _register = new Register();

    private string APIError { get; set; }

    private string APISuccess { get; set; }

    private async Task HandleValidSubmit()
    {
        APIError = String.Empty;
        APISuccess = String.Empty;

        using (var form = new MultipartFormDataContent("RegisterForm"))
        {
            form.Add(new StringContent(_register.Name), "Name");
            form.Add(new StringContent(_register.Surname), "Surname");
            form.Add(new StringContent(_register.Login), "Login");
            form.Add(new StringContent(_register.Email), "Email");
            form.Add(new StringContent(_register.Password), "Password");
            form.Add(new StringContent(_register.RepeatPassword), "RepeatPassword");
            form.Add(new StringContent(_register.AcceptRules.ToString()), "AcceptRules");

            using (var client = new HttpClient())
            {
                try
                {
                    var response = await client.PostAsync(@"http://localhost:5000/v1/user", form);

                    var content = await response.Content.ReadAsStringAsync();

                    if (response.IsSuccessStatusCode)
                    {
                        APISuccess = content;
                        _register = new Register();
                    }
                    else
                    {
                        APIError = content;
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine($"Unexpected error: {e.Message}");
                }
            }
        }
    }
}
