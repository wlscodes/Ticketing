@page "/place/create"
@using Models
@using System.Net.Http.Headers
@using Newtonsoft.Json;
@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage

@if (!String.IsNullOrEmpty(APIError))
{
    <div class="alert alert-danger" role="alert">
        @APIError
    </div>
}

@if (!String.IsNullOrEmpty(APISuccess))
{
    <div class="alert alert-success" role="alert">
        @APISuccess
    </div>
}

<h3>Stwórz salę</h3>
<EditForm Model="_place" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group row">
        <label for="organizator" class="col-sm-2 col-form-label">Wybierz organizację</label>
        <div class="col-sm-10">
            <InputSelect @bind-Value="_place.OrganizatorId" class="form-control" id="organizator">
                @foreach (var o in _adminOrganizators)
                {
                    <option value="@o.Id">@o.Name</option>
                }
            </InputSelect>
        </div>
    </div>

    <div class="form-group row">
        <label for="name" class="col-sm-2 col-form-label">Nazwa sali</label>
        <div class="col-sm-10">
            <InputText id="name" @bind-Value="_place.PlaceName" class="form-control" />
        </div>
    </div>

    <div class="form-group row">
        <button type="button" class="btn btn-primary" @onclick="AddNewSection">Dodaj nową sekcję</button>
    </div>

    <table class="table table-hover">
        <thead>
            <tr>
                <th scope="col">Nazwa sekcji</th>
                <th scope="col">Liczba rzędów</th>
                <th scope="col">Liczba miejsc w rzędzie</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var s in _place.Sections)
            {
                <tr>
                    <td><InputText @bind-Value="s.SectionName" class="form-control" /></td>
                    <td><InputNumber @bind-Value="s.RowsNumber" class="form-control" /></td>
                    <td><InputNumber @bind-Value="s.SeatsInRow" class="form-control" /></td>
                    <td><button type="button" class="btn btn-warning" @onclick="(() => RemoveSection(s))">Usuń</button></td>
                </tr>
            }
        </tbody>
    </table>

    <div class="form-group row">
        <button type="submit" class="btn btn-primary">Wyślij</button>
    </div>
</EditForm>

@code {
    private Place _place = new Place() { Sections = new List<Section>() { new Section() } };

    private List<AdminOrganizators> _adminOrganizators = new List<AdminOrganizators>() { new AdminOrganizators() { Id = 0, Name = "-- Select an orgaznizator --" } };

    private string APIError { get; set; }

    private string APISuccess { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetAdminOrganizations();
    }

    private async Task HandleValidSubmit()
    {
        APIError = String.Empty;

        using (var form = new MultipartFormDataContent("CreatePlaceForm"))
        {
            form.Add(new StringContent(_place.PlaceName), "PlaceName");
            form.Add(new StringContent(_place.OrganizatorId), "OrganizatorId");

            for (int i = 0; i < _place.Sections.Count; i++)
            {
                form.Add(new StringContent(_place.Sections[i].RowsNumber.ToString()), $"Sections[{i}].RowsNumber");
                form.Add(new StringContent(_place.Sections[i].SeatsInRow.ToString()), $"Sections[{i}].SeatsInRow");
                string sectionName = String.IsNullOrEmpty(_place.Sections[i].SectionName) ? "*" : _place.Sections[i].SectionName;
                form.Add(new StringContent(sectionName), $"Sections[{i}].SectionName");
            }

            using (var request = new HttpRequestMessage())
            {
                try
                {
                    string token = await SessionStorage.GetItemAsync<string>("token");

                    request.Method = new HttpMethod("POST");
                    request.RequestUri = new Uri(@"http://localhost:5000/v1/place");
                    request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
                    request.Content = form;

                    var response = await Http.SendAsync(request);

                    var content = await response.Content.ReadAsStringAsync();
                    Console.WriteLine(content);
                    if (response.IsSuccessStatusCode)
                    {
                        APISuccess = content;
                        _place = new Place() { Sections = new List<Section>() { new Section() } };
                    }
                    else
                    {
                        APIError = content;
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine($"Unexpected error: {e.Message}");
                }
            }
        }
    }

    private async Task AddNewSection()
    {
        _place.Sections.Add(new Section());
    }

    private async Task RemoveSection(Section section)
    {
        _place.Sections.Remove(section);
    }

    private async Task GetAdminOrganizations()
    {
        using (var request = new HttpRequestMessage())
        {
            try
            {
                string token = await SessionStorage.GetItemAsync<string>("token");

                request.Method = new HttpMethod("GET");
                request.RequestUri = new Uri(@"http://localhost:5000/v1/administrator");
                request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

                var response = await Http.SendAsync(request);

                var content = await response.Content.ReadAsStringAsync();

                if (response.IsSuccessStatusCode)
                {
                    var result = JsonConvert.DeserializeObject<List<AdminOrganizators>>(content);
                    _adminOrganizators.AddRange(result);
                }

            }
            catch (Exception e)
            {
                Console.WriteLine($"Unexpected error: {e.Message}");
            }
        }
    }
}
